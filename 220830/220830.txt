블록체인 기반 핀테크 및 응용 SW 개발자 양성과정
(비NCS)JavaScript 프로그래밍 언어


script : html에서 JavaScript를 입력하는 태그
        HTML, CSS, JavaScript는 문법이 각각이 다르다.
        지금까지 했던 HTML, CSS는 구조적으로 많이 보고 쓰고 경험 했었다.
        프로그래밍 적으로는 JavaScript이다.

변수 : 데이터를 담는 상자 라고 생각하면 된다.
        이사를 가정이라고 본다면
        1) 큰 이삿짐에 상자에 뭘 넣었는지 상자의 이름을 붙인다. (변수명을 선언한다.)
        2) 그 상자안에 그거에 맞는 물건을 넣는다. (선언한 변수명에 데이터를 정의한다.)
        3) 차에 담는다. (변수명을 선언하고 데이터를 정의한다.  -> 초기화 한다.)

        데이터를 사용한다 -> 변수를 선언한다. -> 변수에 데이터를 정의한다. -> 그걸 렘에 담아둔다.
        다른 프로그램에서는 위치를 알 수 있는데(메모리), JavaScript에서는 없다.

var : 변수를 선언할 때 사용하는 명령어 이다.
        var 명령어는 편하게 계속 마음대로 사용이 가능하다.
        ex) var var1 = 1; ==> var명령어를 이용하여 var1를 선언했다
        console.log(var1); ==> console.log명령어로 콘솔창에 var1를 로그(기록)을 남겨서 보여준다.

        var는 요즘 문제가 많아서 잘 사용하지 않는다.
        여러 사람들이 같은 작업을 수행 할 때 같은 변수를 사용하면서 다른의미로 사용하게 될 수 있기 떄문이다.
        같은 파일내에서 2가지의 의미로 사용되면서 해당 변수가 정확하게 무슨 데이터를 가지고 있는지 알 수 없게 된다.
        재선언, 재정의 둘 다 가능하므로 한 프로젝트에서 여러 개발자들 사이에서 변수에 대한 혼돈이 생길 수 있다.

let : var명령어를 수정 및 업데이트, 보완해서 나온 명령어 이다.
let let1 : 이처럼 선언 후에 재선언이 불가능 하다. 같은 이름으로 변수명을 선언 할 수 없다.
            즉, 겹쳐서(중복해서) 변수명을 선언하여 다른 데이터 값을 사용 하는 경우가 사라진다.
            let은 선언 후에 재정의가 가능하다.
            const는 선언 후에 재정의가 불가능하다.
            const는 선언만 하면 데이터를 정의를 안해주었기 때문에 오류가 발생하여 선언만 할 수 없다.


자료형 : string, number, boolean, undefined, null, object, array
        string은 텍스트
        number는 숫자
        boolean 참/거짓, bool, 불(bool)값 썼는지 ? 이렇게들 쓴다.
        undefined, null 둘 다 값이 없다.
        object는 키와 값으로 이루어져 있는 객체이다.
        array는 배열, 순차적으로 데이터를 넣은 객체 라고 보면 된다.

        string 정의할 때 "", '' 는 한줄 텍스트에 사용하고한다. 역슬래시(\)를 사용하면 여러줄에도 사용 할 수 있다.
         `` 템플릿 리터널 이라고 부르는 걸 사용하면 여러줄을 정의하여 사용 할 수 있다.
         
         number는 말 그대로 숫자를 나타내는 자료형이다.
         계산식을 정의해도 숫자가 정상적으로 들어 간다.

        let number1 = 1;
        let number2 = 1.1;
        let number3 = 1 / 3;
        let number4 = "1"; == > 숫자 일까? 아니다 텍스트
 
        boolean : 참 / 거짓을 담는다. 
        let boolean1 = true;
        let boolean2 = false;
        let boolean3 = 1; == > 참 인가 ? 거짓인가 ? 결론 : 참 (0이 아닌 1이상은 모두 참)
        let boolean4 = "asdf"; == > 참인가 거짓인가? 결론 : 참 (데이터가 비어있으면 거짓, 그게 아니라서 참이다.)
        let boolean5 = 0; == > 거짓
        let boolean6 = "0"; == > 참
        let boolean7 = "\uac00"; == > 참

        undefined, null : undefined는 초기값, 내가 설정하지 않은 없는 값, 빈 값
                            null은 내가 설정한 빈 값

        object : 키와 값으로 이루어진 객체이다. 중괄호로 정의 할 수 있다.

        array : 순차적인 데이터다.
                arr[몇번째 있는지] 넣으면 그 몇번째의 값을 가져 온다.
                arr[0] : 배열의 첫번째 값을 가져온다
                arr[1] : 배열의 두번째 값을 가져온다
                arr[2] : 배열의 세번째 값을 가져온다
                arr.push(*); => 뒤에서 추가한다.
                arr.pop(); => 뒤에서 뺀다.
                arr.unshift(*); => 앞에서 추가한다.
                arr.shift(); => 앞에서 뺀다.

typeof : 변수의 자료형을 알려준다. 
        typeof 변수명 = > 해당 변수명에 자료형을 알려준다.


변수에 대한 표기법 혹은 식별자에 대한 표기법
kebab-Case : 케밥 표기법
            let kebab-case < CSS에서 class명을 선언할 때 많이 사용 했다.

camelCase : 카멜 표기법, 낙타, JavaScript에서 변수명, 함수명 등 이름 선언할 때 어지간하면 이걸 쓴다.
            let camelCase

snake_case : 스네이크 표기법
            let snake_case

PascalCase  : 파스칼 표기법
            let PascalCase < 사용처 : React
            
strHungarianNotation : 헝가리안 표기법, 요즘은 잘 사용 하지 않는 표기법
            let strHungarianNotation < str은 string의 약자로 헝가리안 표기법에서는 변수명 제일 앞에 자료형을 적어준다.

※ let obj1 = {
    "test code" : 1,
    test_code : 2,
};
console.log(obj1["test code"]); <== 첫번째 키 값이 띄어쓰기가 존재하므로 이렇게 사용해야 부를 수 있다.

형변환 : 자료형을 바꿔준다. ex) string -> number
        
연산자 : 이름 그대로 연산(계산) 하는 명령어 이다.
        +, -, *, /, %, **, ++, --, -, !, &&, ||, =, +=, -=, *=, /=, %=, **=, ==, ===, !=, !==
        >, <, >=, <=

        + : 더하기, 숫자끼리는 더하고, 글자들끼리는 붙여준다.
        숫자랑 글자를 더한다면, 그냥 글자로 취급해서 붙여버린다.

        - : 숫자들끼리 사이에 사용한다.
        * : 숫자들끼리 사이에 사용한다.
        / : 숫자들끼리 사이에 사용한다.
        % : 숫자들끼리 사이에 사용한다, 나머지를 구하는 연산이다.
        ** : 숫자들끼리 사이에 사용한다, 제곱을 실행하는 연산이다.

        ++, -- 둘 다 카운터용으로 사용한다. 숫자를 하나 늘리거나 줄이거나 할 때 사용한다.
        console.log(++숫자); = > 숫자를 +1 하고 콘솔에 로그를 남긴다.
        console.log(--숫자); = > 숫자를 -1 하고 콘솔에 로그를 남긴다.
        console.log(숫자++); = > 콘솔에 로그를 남기고, 숫자에 +1 을 한다.
        console.log(숫자--); = > 콘솔에 로그를 남기고, 숫자에 -1 을 한다.


부정 : -, ! 를 사용하여 현재 상태의 부정을 해준다.
        변수가 true면 false로 바꿔주고, false면 true로 바꿔준다.
        !! - > 부정의 부정(이중부정) - > 현재가 boolean 값이 아니여서 boolean 값으로 변환할 때 !! 사용하여 boolean 값으로 변환해준다.

대입연산자 : 좌측에다가 우측의 값과 연산자를 통해 정의한다.

== : 좌측과 우측의 값을 비교하는 연산자이다.
=== : 좌측과 우측의 값과 자료형 까지 비교하는 연산자이다.

!= : 좌측과 우측의 값이 다른지 비교하는 연산자 이다.
!== : === 연산자의 반대로 좌측과 우측의 값과 자료형 까지 다른지 비교하는 연산자이다.